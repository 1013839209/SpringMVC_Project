<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
">

    <!-- 扫描有注解的包 -->
    <context:component-scan base-package="org.dong.springmvc.handler"/>

    <!-- 配置视图解析器 ( InternalResourceViewResolver )-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- 加载国际化资源文件 -->
    <!--
        1.将ResourceBundleMessageSource在程序加载时 加入springmvc :springmvc在启动时自动查找一个id="messageSource"的bean,如果有 则自动加载
        2.如果配置了ResourceBundleMessageSource: 在MVC相应程序时 介入(解析国际化资源文件)
     -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <!-- 配置基名为 i18n 的文件 -->
        <property name="basename" value="i18n"></property>
    </bean>

    <!--
        要用SpringMVC实现: index.jsp >>>> success.jsp  view-name 会被试图解析器加上前缀,后缀
        此注解,会让所有的请求 转入<mvc:...>中匹配映射地址,而会忽略掉@RequsetMapping();
        如果想让 @RequsetMapping 和<mvc...>共存,则需要加入一个注解<mvc:annotation-driven>
     -->
    <mvc:view-controller path="handler/testMvcViewController" view-name="success"/>
    <!-- 此配置是SpringMVC的基础配置,很多功能都需要通过该注解来协调 -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--
        该注解 会让springmvc: 接受一个请求,并且该请求 没有对应的@RequsetMapping时,将该请求交给服务器默认的
        Servlet去处理(直接访问)
    -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>


    <!-- 1.将自定义转换器 纳入SpringIOC容器 -->
    <bean id="myConverter" class="org.dong.springmvc.converter.MyConverter"></bean>
    <!-- 2.将myConverter在纳入 SpringMVC提供的转换器Bean中 -->
    <!--<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters" >
            <set>
                <ref bean="myConverter"/>
            </set>
        </property>
    </bean>-->
    <!-- 3.将conversionService 注册到 annotation-driven中 -->
    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

    <!-- 配置数据格式化 注解 所依赖的bean
            FormattingConversionServiceFactoryBean：既可以实现格式化，又可以实现类型转换
    -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters" >
            <set>
                <ref bean="myConverter"/>
            </set>
        </property>
    </bean>

    <!--
        配置CommonsMultipartResolver，用于实现文件上传，将其加入SpringIOC容器
        springIoc容器在初始化时，会自动寻找一个id="multipartResolver"的bean，并将其加入Ioc容器
     -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <!-- 上传单个文件的最大值 ，单位Byte  -1 表示无限制-->
        <property name="maxUploadSize" value="104857600"></property>
    </bean>

    <!-- 自定义拦截器 配置到springmvc中; 默认拦截全部请求-->
    <mvc:interceptors>
        <!-- 配置具体的拦截路径 -->
        <mvc:interceptor>
            <!-- 设置需要拦截的路径 -->
            <mvc:mapping path="/**"/>
            <!-- 设置不需要拦截的路劲 -->
            <mvc:exclude-mapping path="/handler/testUpload"/>
            <bean class="org.dong.springmvc.interceptor.MyInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

</beans>